c(31.33487100, 36.99816600, 36.99816600)
)
near.obj <- nearestPointOnSegment(segment, coord)
return(as.numeric(near.obj[["distance"]]))
}
coords <- state.data[ , c("x", "y")]
dist <- apply(coords, 1, FUN = segDistance)
dist <- apply(coords, 1, FUN = .segDistance)
dist <- dist * ifelse(state.data["State"] == "New Mexico", -1, 1)
set.cl <- cl <= 4
plot(dist[set.cl], cl[set.cl])
set.cl <- cl <= 4
plot(dist[set.cl], cl[set.cl],
pch = 20, col = "blue",
xlab = "Distance to New Mexico Borrder",
ylab = "Cluster Category",
yaxt = "n"
)
abline(v = 0, lty = 3, col = "red")
set.cl <- cl <= 4
plot(dist[set.cl], cl[set.cl],
pch = 20, col = "blue",
xlab = "Distance to New Mexico Borrder",
ylab = "Cluster Category",
yaxt = "n"
)
abline(v = 0, lty = 3, col = "red")
axis(2, at = 1:4)
library(maps)
map("state", interior = FALSE)
map("state", boundary = FALSE, col = "gray", add = TRUE)
points(data$x, data$y, cex = 0.2, col = "blue")
rm(list=ls())
library(curl)
library(jsonlite)
url <- "https://dangeorge.carto.com/api/v2/sql?q=SELECT COUNT(*) FROM turbines WHERE state = 'CA'"
print(URLencode(url))
res <- fromJSON(URLencode(url))
print(res$rows$count)
turbines <- function(miles) {
base <- "https://dangeorge.carto.com/api/v2/sql?q="
pre <-
"SELECT
COUNT(turbines.*)
FROM
bird_routes, turbines
WHERE
ST_DWithin(
bird_routes.the_geom_webmercator,
turbines.the_geom_webmercator,"
feet <- miles * 1609
url <- paste0(base, pre, feet, ")")
res <- fromJSON(URLencode(url))
return(res$rows$count)
}
turbines(25)
turbines(10)
base <- "https://projects.propublica.org/nonprofits/api/v1/search.json"
params <- "order=revenue&sort_order=desc&page=0"
url <- paste0(base, "?", params)
res <- fromJSON(URLencode(url))
res <- fromJSON(URLencode(url), flatten = TRUE)
res$filings$totrevenue
sub <- data.frame(
revenue = res$filings$totrevenue,
name = res$filings$organization.name
)
View(sub)
dim(sub)
View(sub)
nonprofits <- function(pages) {
base <- "https://projects.propublica.org/nonprofits/api/v1/search.json"
params <- paste0("order=revenue&sort_order=desc&page=", pages)
url <- paste0(base, "?", params)
res <- fromJSON(URLencode(url), flatten = TRUE)
sub <- data.frame(
revenue = res$filings$totrevenue,
name = res$filings$organization.name
)
return(sub)
}
nonprofitlist <- list()
for(page in 0:20){
nonprofitlist[[p]] <- nonprofits(p)
}
for(p in 0:20){
nonprofitlist[[p]] <- nonprofits(p)
}
for(p in 0:20){
nonprofitlist[[p+1]] <- nonprofits(p)
}
?bind_rows
library(dplyr)
nonpro_df <- bind_rows(nonprofitlist)
View(nonpro_df)
nonpro_df <- nonpro_df %>%
group_by(name) %>%
summarize(revenue = mean(revenue))
View(nonpro_df)
?arrange
nonpro_df <- arrange(nonpro_df, desc(revenue))
View(nonpro_df)
library(tidyverse)
library(feather)
full8 <- read_feather("C:\\Users\\loren\\Documents\\Full_eight_years.feather")
mfull_formula <- as.formula(paste(
"Small ~ log.amount + Sequester + ",
paste(names(full8[c(6:18, 20:31, 33:36)]), collapse = " + ")
)
)
library(biglm)
chunk1 <- slice(full8, 1: 3e6)
chunk2 <- slice(full8, 3e6+1:6e6)
chunk2 <- slice(full8, (3e6)+1:6e6)
chunk2 <- slice(full8, ((3e6)+1):6e6)
chunk3 <- slice(full8, ((6e6)+1):9e6)
chunk4 <- slice(full8, ((9e6)+1):nrow(full8)
modelfull <- biglm(mfull_formula, data = full8)
summary(modelfull)
################################################################################
# VIZ
################################################################################
small_sample$pred <- predict(modelbig, small_sample)
data_sample <- sample_n(data_1_rollup, 500000)
small_sample <- sample_n(data_1_rollup, 10000)
plot_sample <- ggplot(data = data_sample, aes(x = log.amount, y = pred))
dens <- plot_sample + geom_density_2d()
plot_small_sample <-
ggplot(data = small_sample,
aes(x = log.amount, y = pred, color = factor(Sequester)))
scatter <- plot_small_sample +
geom_point(size = 1, alpha = 0.1)
scatter + theme_minimal() +
guides(color = guide_legend(
title = NULL,
override.aes = list(alpha = 1, size = 4)
)) +
theme(legend.position = "top") +
xlab("Amount") + ylab("Chance Small Business wins") +
ggtitle("Main model predictions") +
scale_y_continuous(labels = function(x) paste0(round(100*x), "%")) +
scale_x_continuous(
breaks = c(log(10), log(100), log(1e3), log(1e4), log(1e5), log(1e6),
log(1e7), log(1e8)),
labels = function(x) {
x <- exp(x)
x <- ifelse(x < 10000, as.character(round(x)),
ifelse(x < 1000000,
paste0(round(x/1000),"k"),
paste0(round(x/1000000), "M")
)
)
return(x)
}) +
scale_color_manual(
values = c("black","red")
)
ggsave("model_predictions.png", height = 6, width = 8, units = "in")
plot_small_sample_component <-
ggplot(data = small_sample,
aes(x = log.amount, y = pred, color = Component))
scatter_component <- plot_small_sample_component +
geom_point(size = 0.5, alpha = 0.1)
scatter_component + theme_minimal() +
guides(color = guide_legend(
title = NULL,
override.aes = list(alpha = 1, size = 4)
)) +
theme(legend.position = "top") +
xlab("Amount") + ylab("Chance Small Business wins") +
ggtitle("Main model predictions") +
scale_y_continuous(labels = function(x) paste0(round(100*x), "%")) +
scale_x_continuous(
breaks = function(x) seq(x[1], x[2], (x[2] - x[1]) / 10),
labels = function(x) {
x <- exp(x)
x <- ifelse(x < 10000, as.character(round(x)),
ifelse(x < 1000000,
paste0(round(x/1000),"k"),
paste0(round(x/1000000), "M")
)
)
return(x)
}) +
facet_wrap(~ industry)
ggsave("by_component.png", height = 6, width = 8, units = "in")
binned_by_amount <- data_1_rollup %>%
group_by(value) %>%
summarize(percent_small = round(mean(Small), 2))
plot_bins <- ggplot(data = binned_by_amount) +
geom_bar(aes(x = value, y = percent_small), stat = "identity")
plot_bins + theme_minimal() +
xlab("Size of Award") + ylab("Percent of Awards to Small Businesses") +
scale_y_continuous(labels = function(x) paste0(round(100*x), "%"))
ggsave("Award_sizes.png", height = 5, width = 5, units = "in")
binned_by_amount_more <- data_1_rollup %>%
group_by(value, Component) %>%
filter(Component %in% c("Air Force", "Army", "DLA", "Navy")) %>%
summarize(percent_small = round(mean(Small), 2))
plot_bins <- ggplot(data = binned_by_amount_more) +
geom_bar(aes(x = value, y = percent_small), stat = "identity")
plot_bins + theme_minimal() +
xlab("Size of Award") + ylab("Percent of Awards to Small Businesses") +
scale_y_continuous(labels = function(x) paste0(round(100*x), "%")) +
facet_wrap(~ Component, nrow = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust = 1))
ggsave("award_sizes_component.png", height = 4, width = 9, units = "in")
binned_by_amount_indus <- data_1_rollup %>%
group_by(value, industry) %>%
summarize(percent_small = round(mean(Small), 2))
plot_bins <- ggplot(data = binned_by_amount_indus) +
geom_bar(aes(x = value, y = percent_small, fill = industry), stat = "identity")
plot_bins + theme_minimal() +
xlab("Size of Award") + ylab("Percent of Awards to Small Businesses") +
scale_y_continuous(labels = function(x) paste0(round(100*x), "%")) +
facet_wrap(~ industry, nrow = 2) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.2, hjust = 1)) +
scale_fill_manual(
values = c(
"Wholesale Trade" = "#CC4433",
"Manufacturing" = "#447700",
"Prof & Tech Services" = "#00CC99",
"Other" = "gray50",
"Construction" = "#DDAA22",
"Admin & Support Services" = "#330099"
)
) +
guides(fill = FALSE)
ggsave("award_sizes_industry.png", height = 7, width = 8, units = "in")
mx_formula <- as.formula(paste(
"Small ~ log.amount +",
paste(names(data_1_rollup[12:42]), collapse = " + ")
)
)
# ----------------------------------- here, make seperate models before and after
# show scatterplots with seperate regressions of predicted award vs amount
pre_seq <- data_1_rollup %>%
filter(Sequester == 0)
modelpre <- biglm(mx_formula, data = pre_seq)
summary(modelpre)
m2_formula <- as.formula(paste(
"Small ~ log.amount + Sequester + log.amount * Sequester + ",
paste(names(data_1_rollup[c(11, 12 ,14:31, 33:42)]), collapse = " + ")
)
)
modelbig2 <- biglm(m2_formula, data = data_1_rollup)
summary(modelbig2)
coef(modelbig)
data_1_rollup$pred <- predict(modelbig2, data_1_rollup)
data_sample <- sample_n(data_1_rollup, 500000)
small_sample <- sample_n(data_1_rollup, 15000)
small_sample$Sequester <- factor(small_sample$Sequester)
plot_small_sample <-
ggplot(data = small_sample,
aes(x = log.amount, y = pred, color = Sequester))
scatter <- plot_small_sample +
geom_point(size = 0.5, alpha = 0.1)
scatter + theme_minimal() +
guides(color = guide_legend(
title = NULL,
override.aes = list(alpha = 1, size = 4)
)) +
theme(legend.position = "top") +
xlab("Amount") + ylab("Chance Small Business wins") +
ggtitle("Interaction model predictions") +
scale_y_continuous(labels = function(x) paste0(round(100*x), "%")) +
xlim(1, 20) +
scale_x_continuous(
breaks = function(x) seq(x[1], x[2], (x[2] - x[1]) / 10),
labels = function(x) {
x <- exp(x)
x <- ifelse(x < 10000, as.character(round(x)),
ifelse(x < 1000000,
paste0(round(x/1000),"k"),
paste0(round(x/1000000), "M")
)
)
return(x)
}) +
scale_color_manual(
values = c("black", "red"), labels = c("Before Sequestration", "After Sequestration")
)
ggsave("interaction_pred.png", height = 5, width = 5, units = "in")
small_sample <-
data_1_rollup %>%
filter(industry == "Construction")
small_sample <- sample_n(small_sample,15000)
small_sample$Sequester <- factor(small_sample$Sequester)
plot_small_sample <-
ggplot(data = small_sample,
aes(x = log.amount, y = pred, color = Sequester))
scatter <- plot_small_sample +
geom_point(size = 0.5, alpha = 0.1)
scatter + theme_minimal() +
guides(color = guide_legend(
title = NULL,
override.aes = list(alpha = 1, size = 4)
)) +
theme(legend.position = "top") +
xlab("Amount") + ylab("Chance Small Business wins") +
ggtitle("Interaction model: Construction Industry") +
scale_y_continuous(labels = function(x) paste0(round(100*x), "%")) +
xlim(1, 20) +
scale_x_continuous(
breaks = function(x) seq(x[1], x[2], (x[2] - x[1]) / 10),
labels = function(x) {
x <- exp(x)
x <- ifelse(x < 10000, as.character(round(x)),
ifelse(x < 1000000,
paste0(round(x/1000),"k"),
paste0(round(x/1000000), "M")
)
)
return(x)
}) +
scale_color_manual(
values = c("black", "red"), labels = c("Before Sequestration", "After Sequestration")
)
ggsave("interaction_pred_constr.png", height = 5, width = 5, units = "in")
chunk4 <- slice(full8, ((9e6)+1):nrow(full8))
modelfull <- biglm(mfull_formula, data = chunk1)
rm(full8)
modelfull <- biglm(mfull_formula, data = chunk1)
modelfull <- update(modelfull, chunk2)
?biglm
modelfull <- update(modelfull, chunk3)
modelfull <- update(modelfull, chunk4)
summary(modelfull)
setwd("~/GitHub/DoD-over-budget-prediction")
library(tidyverse)
library(forcats)
contracts <- read_csv("data_for_test.csv")
View(contracts)
class(contracts$UnmodifiedCurrentCompletionDate)
closed_contracts <- contracts %>%
filter(UnmodifiedCurrentCompletionDate <= as.Date("2015-09-01"))
class(contracts$IsClosed)
closed_contracts <- contracts %>%
filter(
UnmodifiedCurrentCompletionDate <= as.Date("2015-10-01") |
LastCurrentCompletionDate <= as.Date("2014-10-01") |
IsClosed == "closed")
View(closed_contracts)
?slice
?cut
summary(closed_contracts$UnmodifiedContractBaseAndAllOptionsValue)
options(scipen = 99)
summary(closed_contracts$UnmodifiedContractBaseAndAllOptionsValue)
closed_contracts$contract_value <- cut(
closed_contracts$UnmodifiedContractBaseAndAllOptionsValue,
breaks = c(1000, 3500, 10000, 50000, 150000, 500000, 2e6, 10e6, 100e6))
closed_contracts$contract_value <- cut(
closed_contracts$UnmodifiedContractBaseAndAllOptionsValue,
breaks = c(-9e12, 1000, 3500, 10000,
50000, 150000, 500000, 2e6, 10e6, 100e6, 9e12))
class(closed_contracts$contract_value
)
closed_contracts$contract_value <- cut(
closed_contracts$UnmodifiedContractBaseAndAllOptionsValue,
breaks = c(-9e12, 1000, 3500, 10000,
50000, 150000, 500000, 2e6, 10e6, 100e6, 9e12),
labels = c("1k", "3.5k", "10k", "50k", "150k", "500k", "2M",
"10M", "100M", "yuge")
)
?n
test <- closed_contracts %>%
group_by(contract_value) %>%
summarize(Total = n(), Failed = sum(Term))
test <- closed_contracts %>%
group_by(contract_value) %>%
summarize(Total = n(), Failed = sum(Term))
class(closed_contracts$Term)
unique(closed_contracts$Term)
closed_contracts <- closed_contracts %>%
mutate(Failed = ifelse(Term == "Terminated", 1, 0))
mean(closed_contracts$Failed)
test <- closed_contracts %>%
group_by(contract_value) %>%
summarize(Total = n(), Failed = sum(Failed))
View(test)
n
closed_contracts <- contracts %>%
filter(
UnmodifiedCurrentCompletionDate <= as.Date("2015-10-01") |
LastCurrentCompletionDate <= as.Date("2014-10-01") |
IsClosed == "closed")
closed_contracts$contract_value <- cut(
closed_contracts$UnmodifiedContractBaseAndAllOptionsValue,
breaks = c(-9e12, 1000, 3500, 10000,
50000, 150000, 500000, 2e6, 10e6, 100e6, 9e12),
labels = c("1k", "3.5k", "10k", "50k", "150k", "500k", "2M",
"10M", "100M", ">100M")
)
closed_contracts <- closed_contracts %>%
mutate(Failed = ifelse(Term == "Terminated", 1, 0))
closed_contracts <- closed_contracts %>%
group_by(contract_value) %>%
summarize(Total = n(), Failed = sum(Failed))
closed_contracts$fail_rate <- closed_contracts$Failed / closed_contracts$Total
View(closed_contracts)
closed_contracts$fail_rate <-
(closed_contracts$Failed / closed_contracts$Total) * 100
View(closed_contracts)
source("C:\\Users\\loren\\Google Drive\\Documents\\R\\Data viz class\\theme_LCL")
source("C:\\Users\\loren\\Google Drive\\Documents\\R\\Data viz class\\theme_LCL.R")
closed_contracts$setaside <- factor(ifelse(
closed_contracts$contract_value %in% c("10k", "50k", "150k"),
"yes",
"no"))
View(closed_contracts)
p <- ggplot(data = closed_contracts, aes(x = contract_value, y = fail_rate)) +
geom_bar(aes(fill = setaside), stat = "identity", alpha = 0.7) +
theme_LCL()
p
p <- ggplot(data = closed_contracts, aes(x = contract_value, y = fail_rate)) +
geom_bar(aes(fill = setaside), stat = "identity", alpha = 0.7) +
theme_LCL() +
scale_fill_manual(
values = c(
"yes" = "#D09040",
"no" = "#900090"))
p
library(scales)
p <- ggplot(data = closed_contracts, aes(x = contract_value, y = fail_rate)) +
geom_bar(aes(fill = setaside), stat = "identity", alpha = 0.7) +
theme_LCL() +
scale_fill_manual(
values = c(
"yes" = "#D09040",
"no" = "#900090")) +
scale_y_continuous(labels = scales::percent) +
theme(
legend.position = "none") +
ylab("Proportion Terminated") +
xlab("Size of Contract") +
ggtitle("Set-Asides Don't Fail More")
shiny::runApp('~/GitHub/SIPRI-Apps/SIPRI/Rankings')
runApp('~/GitHub/SIPRI-Apps/SIPRI/Transfers')
?geom_rect
p <- ggplot(data = closed_contracts, aes(x = contract_value, y = fail_rate)) +
geom_bar(aes(fill = setaside), stat = "identity", alpha = 0.7) +
theme_LCL() +
scale_fill_manual(
values = c(
"yes" = "#D09040",
"no" = "#900090")) +
scale_y_continuous(labels = scales::percent) +
theme(
legend.position = "none") +
ylab("Proportion Terminated") +
xlab("Size of Contract") +
ggtitle("Set-Asides Don't Fail More") +
geom_rect(
mapping = aes(
ymin = -Inf,
ymax = Inf,
xmin = 3,
xmax = 6,
color = NA,
fill = "gray75"))
p
View(closed_contracts)
p <- ggplot(data = closed_contracts, aes(x = contract_value, y = fail_rate)) +
geom_bar(aes(fill = setaside), stat = "identity", alpha = 0.7) +
theme_LCL() +
scale_fill_manual(
values = c(
"yes" = "#D09040",
"no" = "#900090")) +
scale_y_continuous(labels = scales::percent) +
theme(
legend.position = "none") +
ylab("Proportion Terminated") +
xlab("Size of Contract") +
ggtitle("Set-Asides Don't Fail More")
p
p <- ggplot(data = closed_contracts, aes(x = contract_value, y = fail_rate)) +
geom_bar(aes(fill = setaside), stat = "identity", alpha = 0.7) +
theme_LCL() +
scale_fill_manual(
values = c(
"yes" = "#D09040",
"no" = "#900090")) +
scale_y_continuous(labels = scales::percent) +
theme(
legend.position = "none",
axis.ticks = element_blank()) +
ylab("Proportion Terminated") +
xlab("Size of Contract") +
ggtitle("Set-Asides Don't Fail More")
p
library(svglite)
p <- ggplot(data = closed_contracts, aes(x = contract_value, y = fail_rate)) +
geom_bar(aes(fill = setaside), stat = "identity", alpha = 0.7) +
theme_LCL() +
scale_fill_manual(
values = c(
"yes" = "#D09040",
"no" = "#900090")) +
scale_y_continuous(labels = scales::percent) +
theme(
legend.position = "top",
axis.ticks = element_blank()) +
ylab("Proportion Terminated") +
xlab("Size of Contract") +
ggtitle("Set-Asides Don't Fail More")
p
library(svglite)
ggsave(
file="C:\\Users\\loren\\Google Drive\\Documents\\R\\Data viz class\\setasides.svg",
plot=p,
width=10, height=7)
