FA_data <- read_FA_data("C:/Users/Loren/Desktop/gabe FA")
getwd()
###########################################################################
# READ FA DATA FUNCTION:
# Reads foreign assistance data from CSV files and returns cleaned data
# in data.table format            ** see: help(package = data.table)
###########################################################################
read_FA_data <- function(filepath = "./FA_CSVs"){
require(data.table)
require(plyr)
files <- list.files(path = filepath, pattern = "csv$")
df <- rbind.fill(lapply(files, fread))
df
}
FAdata <-read_FA_data()
filepath = "./FA_CSVs"
files <- list.files(path = filepath, pattern = "csv$")
files
df <- rbind.fill(lapply(files, fread))
df <- rbind.fill(lapply(files, fread, header = TRUE))
test <- lapply(files, fread, header = TRUE))
test <- lapply(files, fread, header = TRUE)
test <- fread(files[1])
?fread
read_FA_data <- function(filepath = "./FA_CSVs"){
origwd <- getwd()
setwd(filepath)
require(data.table)
require(plyr)
files <- list.files(pattern = "csv$")
df <- rbind.fill(lapply(files, fread, header = TRUE))
setwd(origwd)
df
}
FA_data <- read_FA_data
FA_data <- read_FA_data()
class(FA_data)
View(FA_data)
?rbind.fill
names(FA_data)
FA_data$names
FA_data$name
names(FA_data)
?sub
toupper(grep([:alnum:],names(dt)))
toupper(grep("[:alnum:]",names(dt)))
toupper(grep("[:alnum:]",names(FA_data)))
grep("[:alnum:]",names(FA_data))
names(FA_data)
toupper(names(FA_data))
gsub([:alnum:],"",names(dt)toupper(names(FA_data))
gsub("[:alnum:]","",names(dt)toupper(names(FA_data))
gsub([:alnum:],"",toupper(names(FA_data))
gsub("[:alnum:]","",toupper(names(FA_data))
)
gsub("[^[:alnum:]]", "", names(FA_data))
read_FA_data <- function(filepath = "./FA_CSVs"){
origwd <- getwd()
setwd(filepath)
require(data.table)
require(plyr)
files <- list.files(pattern = "csv$")
df <- rbind.fill(lapply(files, fixcolumn))
setwd(origwd)
df
}
fixcolumn <- function(file) {
dt <- fread(file)
names(dt) <- toupper(gsub("[^[:alnum:]]", "", names(dt)))
dt
}
FA_data <- read_FA_data()
View(FA_data)
install.packages("ggplot2")
install.packages("ggradar")
getwd()
library(foreign)
library(tidyverse)
?echo
a_t_pct <- round((21/1562)*100, 1)
n_t_pct <- round((341/409)*100, 1)
vote_data <-
tbl_df(
read.dta(file.path(
"C:","Users","Loren","Google Drive","Documents","Assignments",
"Stats 3","6","Hyde_POP_2012.dta"
)))
library(foreign)
library(tidyverse)
vote_data <-
tbl_df(
read.dta(file.path(
"C:","Users","Loren","Google Drive","Documents","Assignments",
"Stats 3","6","Hyde_POP_2012.dta"
)))
itt_d <- vote_data %>%
filter(treat == 1) %>%
mean(invalidballots)
itt_d <- vote_data %>%
group_by(treat) %>%
mean
vote_data %>%
group_by(treat) %>%
mean
itt_d <- vote_data %>%
group_by(treat) %>%
mean(invalidballots)
itt_d <- vote_data %>%
group_by(treat) %>%
summarize(invalidballots, mean())
vote_data %>%
group_by(treat) %>%
summarize(invalidballots, mean())
?summarize
vote_data %>%
group_by(treat) %>%
summarize(mean(invalidballots))
ITT_Y <- vote_data %>%
group_by(treat) %>%
summarize(mean(invalidballots))
vote_data %>%
group_by(treat) %>%
summarize(mean(invalidballots))
itt_y_tbl <- vote_data %>%
group_by(treat) %>%
summarize(mean(invalidballots))
itt_y_tbl
View(itt_y_tbl)
View(itt_y_tbl)
?collect
collapse(itt_y_tbl)
itt_y_tbl <- vote_data %>%
group_by(treat) %>%
summarize(mean(invalidballots)) %>%
round(2)
itt_y_tbl
itt_d_tbl <- vote_data %>%
group_by(treat) %>%
summarize(mean(observed)) %>%
round(2)
itt_d_tbl
itt_d_tbl <- vote_data %>%
group_by(treat) %>%
summarize(mean(observed)) %>%
round(4)
itt_d_tbl
itt_d_tbl <- vote_data %>%
group_by(treat) %>%
summarize(mean(observed)) %>%
round(4)
itt_d_tbl
?ivreg
install.packages("AER")
library(foreign)
library(tidyverse)
library(AER)
?ivreg
vote_ivreg <- ivreg(invalidballots ~ observed | treat, data = vote_data)
vote_ivreg <- ivreg(invalidballots ~ observed | treat, data = vote_data)
summary(vote_ivreg)
confint(vote_ivreg)
ggplot(data = vote_data, aes(x = observed)) + geom_density()
ggplot(data = vote_data, aes(x = invalidballots)) + geom_density()
ggplot(data = vote_data, aes(x = invalidballots)) + geom_density() + theme_bw()
ggplot(data = vote_data, aes(x = invalidballots)) + geom_density() +
theme_classic()
ggplot(data = vote_data, aes(x = invalidballots)) + geom_density() +
theme_bw()
ggplot(data = vote_data, aes(x = invalidballots)) + geom_density() +
theme_classic()
trt <- c(rep(0,8), rep(1,9))
x <- c(1042, 1617, 1180, 973, 1552, 1251, 1151, 728)
y <- c(874, 389, 612, 798, 1152, 893, 541, 741, 1064)
out <- c(x,y)
cbind(out, trt)
?wilcox_test
?wilcox.test
vote_data
?mutate
?wilcox.test
vote_data %>%
mutate(treat = as.factor(treat)) %>%
wilcox.test(invalidballots ~ treat)
vote_data %>%
wilcox.test(invalidballots ~ treat)
wilcox.test(invalidballots ~ treat, data = vote_data)
library(foreign)
library(AER)
library(tidyverse)
vote_data <-
tbl_df(
read.dta(file.path(
"C:","Users","Loren","Google Drive","Documents","Assignments",
"Stats 3","6","Hyde_POP_2012.dta"
)))
a_t_pct <- round((21/1562)*100, 1)
n_t_pct <- round((341/409)*100, 1)
itt_y_tbl <- vote_data %>%
group_by(treat) %>%
summarize(mean(invalidballots)) %>%
round(2)
itt_y_tbl
itt_d_tbl <- vote_data %>%
group_by(treat) %>%
summarize(mean(observed)) %>%
round(4)
itt_d_tbl
vote_ivreg <- ivreg(invalidballots ~ observed | treat, data = vote_data)
summary(vote_ivreg)
confint(vote_ivreg)
ggplot(data = vote_data, aes(x = invalidballots)) + geom_density() +
theme_classic()
wilcox.test(invalidballots ~ treat, data = vote_data)
library(foreign)
library(Matching)
library(tidyverse)
preg_data <-
tbl_df(
read.dta(file.path(
"C:","Users","Loren","Google Drive","Documents","Assignments",
"Stats 3","7","lbw_data.dta"
)))
covariates <- c("any_drink_on_avg",
"mother_foreign_born",
"mother_hispanic_other",
"mother_black",
"mother_educ_hs",
"mother_educ_less_than_hs",
"mother_cardiac_disease",
"mother_lung",
"mother_diabetes"
)
test <- paste("use_tobacco ~ ", paste(covariates, collapse = ' + ')) %>%
as.formula() %>%
MatchBalance(data = preg_data)
before <- test$BeforeMatching
install.packages("stargazer")
library(stargazer)
stargazer(before)
stargazer(test)
argl <- tbl_df(covariates, before$sdiff, before$p.value)
?tbl_df
?tbl_df(cbind(covariates, before$sdiff, before$p.value))
argl <- tbl_df(cbind(covariates, before$sdiff, before$p.value))
View(argl)
fump <- cbind(covariates, before$sdiff, before$p.value)
fump
fump <- tibble(covariates, before$sdiff, before$p.value)
before$sdiff
rbind(covariates, before)
tibble(covariates, before)
tibble(covariates, unlist(before))
cbind(covariates,before)
tibble(cbind(covariates,before))
before$covariate <- covariates
tibble(before)
data.frame(before)
as.list(before)
fump <- as.list(before)
tibble(fump)
tibble(cbind(before))
library(plyr)
asdf <- ldply(before, data.frame)
before[[1]]
detach("package:plyr")
library(dplyr)
temp <- tempfile()
download.file("https://github.com/GeorgetownMcCourt/data-science/raw/master/homeworks/homework3/toStudents/homework3_data.Rda", temp, mode="wb")
load(temp)
meanf1 <- function(actual, predicted){
#Mean F1 score function
#actual = a vector of actual labels
#predicted = predicted labels
classes <- unique(actual)
results <- data.frame()
for(k in classes){
results <- rbind(results,
data.frame(class.name = k,
weight = sum(actual == k)/length(actual),
precision = sum(predicted == k & actual == k)/sum(predicted == k),
recall = sum(predicted == k & actual == k)/sum(actual == k)))
}
results$score <- results$weight * 2 * (results$precision * results$recall) / (results$precision + results$recall)
return(sum(results$score))
}
cluster <- c()
for (i in 2:length(train$activity)) {
if (train$activity[i - 1] == train$activity[i]) {
cluster < c(cluster, 1)
}else {
cluster <- c(cluster, 0)
}
}
View(train)
train$activity <- factor(train$activity)
set.seed(100)
rand <- runif(nrow(train))
rand <- rand > 0.3
train_train <- train[rand == T,]
train_test <- train[rand == F,]
rand1 <- runif(nrow(train_test))
rand1 <- rand1 > 0.5
train_test <- train_test[rand1 == T,]
train_validate <- train_test[rand1 == F,]
View(train_validate)
library(rpart)
tree_fit <- rpart(activity ~ accel + avg50 + diff50 + sd50 + time, method = "class", data = train_train)
printcp(tree_fit)
tree_fit.0 <- rpart(activity ~ accel + avg50 + diff50 + sd50 + time, method = "class", data = train_train, cp = 0)
printcp(tree_fit.0)
tree_fit.opt <- rpart(activity ~ accel + avg50 + diff50 + sd50 + time, method = "class", data = train_train, cp = 2.0137e-04)
printcp(tree_fit.opt)
library(rpart.plot)
install.packages("rpart.plot")
View(train_validate)
a
library(rpart.plot)
rpart.plot(tree_fit.opt, shadow.col="gray", nn=TRUE)
pred_fit <- predict(tree_fit, train_train, type = "class")
pred_fit.0 <- predict(tree_fit.0, train_train, type = "class")
pred_fit.opt <- predict(tree_fit.opt, train_train, type = "class")
pred_test.opt <- predict(tree_fit.opt, train_test, type = "class")
pred_test.base <- predict(tree_fit, train_test, type = "class")
pred_train_validate <- predict(tree_fit.opt, train_validate, "class")
headl(pred_fit)
head(pred_fit)
tail(pred_fit)
View(train_test)
View(train_train)
pred_test.opt <- predict(tree_fit.opt, train_test, type = "class")
pred_test_opt
pred_test.opt
input.train_train <- rbind(data.frame(model = "optimal", d = train_train$activity,  m = pred_fit.opt))
input.train_train.base <- rbind(data.frame(model = "base", d = train_train$activity, m = pred_fit))
input.train_test <- rbind(data.frame(model = "optimal", d = train_test$activity, m = pred_test.opt))
train_test$base_predict <- rbind(data.frame(model = "base", d = train_test$activity, m = pred_test.base))
train_validate$input.train_validate <- rbind(data.frame(model = "optimal", d = train_validate$activity, m = pred_train_validate))
View(train_validate)
fit.rf <- randomForest(activity ~ time + accel + avg50 + avg100 + diff50 + diff100 + sd50 + sd100, data = train_train)
meanf1(input.train_train$d, input.train_train$m)
meanf1(input.train_train.base$d, input.train_train.base$m)
meanf1(input.train_test$d, input.train_test$m)
meanf1(input.test.base$d, input.test.base$m)
meanf1(train_validate$activity, train_validate$input.train_validate.m)
?meanf1
rm(list = ls())
temp <- tempfile()
download.file("https://github.com/GeorgetownMcCourt/data-science/raw/master/homeworks/homework3/toStudents/homework3_data.Rda", temp, mode="wb")
load(temp)
meanf1 <- function(actual, predicted){
#Mean F1 score function
#actual = a vector of actual labels
#predicted = predicted labels
classes <- unique(actual)
results <- data.frame()
for(k in classes){
results <- rbind(results,
data.frame(class.name = k,
weight = sum(actual == k)/length(actual),
precision = sum(predicted == k & actual == k)/sum(predicted == k),
recall = sum(predicted == k & actual == k)/sum(actual == k)))
}
results$score <- results$weight * 2 * (results$precision * results$recall) / (results$precision + results$recall)
return(sum(results$score))
}
cluster <- c()
for (i in 2:length(train$activity)) {
if (train$activity[i - 1] == train$activity[i]) {
cluster < c(cluster, 1)
}else {
cluster <- c(cluster, 0)
}
}
train$activity <- factor(train$activity)
set.seed(100)
rand <- runif(nrow(train))
rand <- rand > 0.3
train_train <- train[rand == T,]
train_test <- train[rand == F,]
rand1 <- runif(nrow(train_test))
rand1 <- rand1 > 0.5
train_test <- train_test[rand1 == T,]
train_validate <- train_test[rand1 == F,]
View(train_validate)
View(train_train)
View(test)
sum(is.na(test$time)
)
View(train_test)
train_test <- train_test[rand1 == T,]
View(train_test)
train_test <- train[rand == F,]
rand1 <- runif(nrow(train_test))
rand1 <- rand1 > 0.5
train_test <- train_test[rand1 == T,]
View(train_test)
train_test <- train[rand == F,]
rand1 <- runif(nrow(train_test))
rand1 <- rand1 > 0.5
train_test <- train_test[rand1 == T,]
View(train_test)
train_validate <- train_test[rand1 == F,]
View(train_validate)
train_test <- train[rand == F,]
rand1 <- runif(nrow(train_test))
rand1 <- rand1 > 0.5
train_test1 <- train_test[rand1 == T,]
train_validate <- train_test[rand1 == F,]
View(train_validate)
temp <- tempfile()
download.file("https://github.com/GeorgetownMcCourt/data-science/raw/master/homeworks/homework3/toStudents/homework3_data.Rda", temp, mode="wb")
load(temp)
kfolds.index <- function(n, k, random = TRUE){
# Returns a vector of labels for each of k-folds.
# Useful for setting up k-folds cross validation
#
# Args:
#       n: data size
#       k: k-folds
#       random: whether folds should be sequential or randomized (default)
#
# Returns:
#       Vector of numeric labels
#create row index
row.id <- 1:n
#Decide splits
break.id <- cut(row.id, breaks = k, labels = FALSE)
#Randomize
if(random == TRUE){
row.id <- row.id[sample(row.id, replace = FALSE)]
}
#Package up
out <- data.frame(row.id = row.id, folds = break.id)
out <- out[order(out$row.id), ]
return(out[,2])
}
meanf1 <- function(actual, predicted){
#Mean F1 score function
#actual = a vector of actual labels
#predicted = predicted labels
classes <- unique(actual)
results <- data.frame()
for(k in classes){
results <- rbind(results,
data.frame(class.name = k,
weight = sum(actual == k)/length(actual),
precision = sum(predicted == k & actual == k)/sum(predicted == k),
recall = sum(predicted == k & actual == k)/sum(actual == k)))
}
results$score <- results$weight * 2 * (results$precision * results$recall) / (results$precision + results$recall)
return(sum(results$score))
}
library(dplyr)
train[4:17] <- sapply(train[4:17], scale)
test[3:16] <- sapply(test[3:16], scale)
a
test$yhat <- knn(
train = train[4:17],
test = test[3:16],
cl = train$activity,
k = 5
)
library(class)
test$yhat <- knn(
train = train[4:17],
test = test[3:16],
cl = train$activity,
k = 5
)
myPredictions <- test %>%
select(id, yhat) %>%
mutate(activity = yhat)
View(myPredictions)
install.packages("rtf")
library(rtf)
setwd("~/GitHub/DoD-over-budget-prediction")
library(tidyverse)
testdata <- read_csv("data_for_test.csv")
names(testdata)
mean(testdata$IsClosed)
mean(testdata$IsClosed, na.rm = T)
mean(testdata$IsClosed, na.rm = TRUE)
unique(testdata$IsClosed)
mean(testdata$IsClosed == "Closed")
unique(testdata$FxCb)
unique(testdata$Fee)
unique(testdata$IDV)
unique(testdata$Comp)
unique(testdata$Who)
unique(testdata$What)
unique(testdata$Intl)
unique(testdata$PSR)
unique(testdata$LowCeil)
unique(testdata$Ceil)
unique(testdata$Dur)
unique(testdata$SingleOffer)
mean(is.na(testdata$SingleOffer))
unique(testdata$Offr)
unique(testdata$Soft)
unique(testdata$UCA)
unique(testdata$CRai)
unique(testdata$NChg)
unique(testdata$Veh)
unique(testdata$UnmodifiedNumberOfOffersReceived)
unique(testdata$Term)
unique(testdata$UnmodifiedContractBaseAndAllOptionsValue)
unique(testdata$SumOfisChangeOrder)
unique(testdata$pChangeOrderUnmodifiedBaseAndAll)
unique(testdata$pChangeOrderObligated)
unique(testdata$MinOfEffectiveDate)
unique(testdata$IsClosed)
mean(testdata$IsClosed == "Closed")
